{
  "swagger": "2.0",
  "info": {
    "description": "This is a simple API that shows how UTMap will perform its operations",
    "version": "1.0.0",
    "title": "UTMap API",
    "contact": {
      "email": "you@your-company.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host": "virtserver.swaggerhub.com",
  "basePath": "/DSC-UTMap/UTMap-API/1.0.0",
  "tags": [
    {
      "name": "locations",
      "description": "Operations related to the buildings displayed by UTMap"
    },
    {
      "name": "subLocations",
      "description": "Operations related to classrooms or subsections of locations displayed by UTMap"
    },
    {
      "name": "events",
      "description": "Operations related to events attached to sublocations"
    }
  ],
  "schemes": [
    "https",
    "http"
  ],
  "paths": {
    "/location": {
      "get": {
        "tags": [
          "locations"
        ],
        "summary": "Searches locations on UTMap",
        "description": "By passing in the appropriate options, a user can search for existing locations in the system",
        "operationId": "searchLocations",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "searchString",
            "in": "query",
            "description": "passes an optional search string to look up locations",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "search results matching criteria",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Location"
              }
            }
          },
          "400": {
            "description": "bad input parameter"
          }
        }
      },
      "post": {
        "tags": [
          "locations"
        ],
        "summary": "Adds a location to UTMap",
        "description": "A user can submit a json representation of a location to add to the list of existing locations in the system",
        "operationId": "addLocation",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Location object to add to the map",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Location"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "item created"
          },
          "400": {
            "description": "invalid input, object invalid"
          },
          "409": {
            "description": "an existing item already exists"
          }
        }
      },
      "put": {
        "tags": [
          "locations"
        ],
        "summary": "updates an existing location on UTMap",
        "description": "A user can submit a json representation of a location to replace an existing location in the system",
        "operationId": "updateLocation",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Location object to update",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Location"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "item updated"
          },
          "400": {
            "description": "invalid input, object invalid"
          },
          "404": {
            "description": "object not found"
          }
        }
      }
    },
    "/location/{locationCode}": {
      "get": {
        "tags": [
          "locations"
        ],
        "summary": "Finds a location by its 2-character building code",
        "description": "By passing in a valid 2-character building code, a user can search for a specific location in the system",
        "operationId": "getLocationByCode",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "locationCode",
            "in": "path",
            "description": "2-character building code for location that needs to be found",
            "required": true,
            "type": "string",
            "maxLength": 2,
            "minLength": 2,
            "format": "buildingCode"
          }
        ],
        "responses": {
          "200": {
            "description": "location found",
            "schema": {
              "$ref": "#/definitions/Location"
            }
          },
          "400": {
            "description": "Invalid building code supplied"
          },
          "404": {
            "description": "location not found"
          }
        }
      },
      "delete": {
        "tags": [
          "locations"
        ],
        "summary": "Deletes a location by its 2-character building code",
        "description": "By passing in a valid 2-character building code, a user can delete a specific location in the system",
        "operationId": "deleteLocation",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "locationCode",
            "in": "path",
            "description": "2-character building code for location that needs to be deleted",
            "required": true,
            "type": "string",
            "maxLength": 2,
            "minLength": 2,
            "format": "buildingCode"
          }
        ],
        "responses": {
          "200": {
            "description": "location deleted",
            "schema": {
              "$ref": "#/definitions/Location"
            }
          },
          "400": {
            "description": "Invalid building code supplied"
          },
          "404": {
            "description": "location not found"
          }
        }
      }
    },
    "/subLocation": {
      "get": {
        "tags": [
          "subLocations"
        ],
        "summary": "Searches sublocations on UTMap",
        "description": "By passing in the appropriate options, a user can search for existing locations in the system",
        "operationId": "searchSubLocations",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "searchString",
            "in": "query",
            "description": "passes an optional search string to look up sublocations",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "search results matching criteria",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SubLocation"
              }
            }
          },
          "400": {
            "description": "bad input parameter"
          }
        }
      },
      "post": {
        "tags": [
          "subLocations"
        ],
        "summary": "Adds a sublocation to UTMap",
        "description": "A user can submit a json representation of a sublocation to add to the list of existing sublocations in the system",
        "operationId": "addSubLocation",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "subLocation",
            "description": "subLocation to add",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SubLocation"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "item created"
          },
          "400": {
            "description": "invalid input, object invalid"
          },
          "409": {
            "description": "an existing item already exists"
          }
        }
      },
      "put": {
        "tags": [
          "subLocations"
        ],
        "summary": "updates an existing sublocation on UTMap",
        "operationId": "updateSubLocation",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Sublocation object to update",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SubLocation"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "item updated"
          },
          "400": {
            "description": "invalid input, object invalid"
          },
          "404": {
            "description": "object not found"
          }
        }
      }
    },
    "/subLocation/{subLocationName}": {
      "get": {
        "tags": [
          "subLocations"
        ],
        "summary": "Finds a sublocation by its name",
        "description": "By passing in a valid sublocation name, a user can search for a specific sublocation in the system",
        "operationId": "getSubLocationByName",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "subLocationName",
            "in": "path",
            "description": "5-6 character name for the subLocation that needs to be found",
            "required": true,
            "type": "string",
            "format": "roomCode"
          }
        ],
        "responses": {
          "200": {
            "description": "sublocation found",
            "schema": {
              "$ref": "#/definitions/SubLocation"
            }
          },
          "400": {
            "description": "Invalid name supplied"
          },
          "404": {
            "description": "sublocation not found"
          }
        }
      },
      "delete": {
        "tags": [
          "subLocations"
        ],
        "summary": "Deletes a sublocation by its name",
        "description": "By passing in a valid sublocation name, a user can search for a specific sublocation in the system",
        "operationId": "deleteSubLocation",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "subLocationName",
            "in": "path",
            "description": "5-6 character name for the subLocation that needs to be found",
            "required": true,
            "type": "string",
            "format": "roomCode"
          }
        ],
        "responses": {
          "200": {
            "description": "sublocation deleted",
            "schema": {
              "$ref": "#/definitions/SubLocation"
            }
          },
          "400": {
            "description": "Invalid name supplied"
          },
          "404": {
            "description": "sublocation not found"
          }
        }
      }
    },
    "/event": {
      "get": {
        "tags": [
          "events"
        ],
        "summary": "Searches events on UTMap",
        "description": "By passing in the appropriate options, a user can search for existing events in the system",
        "operationId": "searchEvents",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "searchString",
            "in": "query",
            "description": "passes an optional search string to look up events",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "search results matching criteria",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Event"
              }
            }
          },
          "400": {
            "description": "bad input parameter"
          }
        }
      },
      "post": {
        "tags": [
          "events"
        ],
        "summary": "Adds an event to UTMap",
        "description": "A user can submit a json representation of an event to add to the list of existing events in the system",
        "operationId": "addEvent",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "event",
            "description": "Event to add",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Event"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "item created"
          },
          "400": {
            "description": "invalid input, object invalid"
          },
          "409": {
            "description": "an existing item already exists"
          }
        }
      },
      "put": {
        "tags": [
          "events"
        ],
        "summary": "updates an existing event on UTMap",
        "operationId": "updateEvent",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Event object to update",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Event"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "item updated"
          },
          "400": {
            "description": "invalid input, object invalid"
          },
          "404": {
            "description": "object not found"
          }
        }
      }
    },
    "/event/{eventName}": {
      "get": {
        "tags": [
          "events"
        ],
        "summary": "Finds an event by its name",
        "description": "By passing in a valid event name, a user can search for a specific event in the system",
        "operationId": "getEventByName",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "eventName",
            "in": "path",
            "description": "name of the event that needs to be found",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "event found",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          },
          "400": {
            "description": "Invalid name supplied"
          },
          "404": {
            "description": "event not found"
          }
        }
      },
      "delete": {
        "tags": [
          "events"
        ],
        "summary": "Deletes an event by its name",
        "description": "By passing in a valid event name, a user can search for a specific event in the system",
        "operationId": "deleteEvent",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "eventName",
            "in": "path",
            "description": "name for the subLocation that needs to be found",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "event deleted",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          },
          "400": {
            "description": "Invalid name supplied"
          },
          "404": {
            "description": "event not found"
          }
        }
      }
    }
  },
  "definitions": {
    "Space": {
      "type": "object",
      "required": [
        "code",
        "id",
        "name"
      ],
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "d290f1ee-6c54-4b01-90e6-d701748f0851"
        },
        "name": {
          "type": "string",
          "example": "Deerfield Hall"
        },
        "code": {
          "type": "string",
          "format": "buildingCode",
          "example": "DH",
          "minLength": 2,
          "maxLength": 2
        }
      }
    },
    "Location": {
      "allOf": [
        {
          "$ref": "#/definitions/Space"
        },
        {
          "type": "object",
          "required": [
            "code",
            "coords",
            "id",
            "name",
            "subLocations"
          ],
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid",
              "example": "d290f1ee-6c54-4b01-90e6-d701748f0851"
            },
            "name": {
              "type": "string",
              "example": "Deerfield Hall"
            },
            "code": {
              "type": "string",
              "format": "buildingCode",
              "example": "DH",
              "minLength": 2,
              "maxLength": 2
            },
            "coords": {
              "type": "array",
              "example": "200, 400",
              "items": {
                "type": "integer"
              }
            },
            "subLocations": {
              "type": "object",
              "example": {
                "Deerfield Hall": "DH2000"
              },
              "additionalProperties": {
                "$ref": "#/definitions/Location_subLocations"
              }
            }
          }
        }
      ]
    },
    "SubLocation": {
      "allOf": [
        {
          "$ref": "#/definitions/Space"
        },
        {
          "type": "object",
          "required": [
            "events",
            "id",
            "name",
            "roomNumber"
          ],
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid",
              "example": "d290f1ee-6c54-4b01-90e6-d701748f0851"
            },
            "name": {
              "type": "string",
              "format": "roomCode",
              "example": "DH2000"
            },
            "roomNumber": {
              "type": "integer",
              "example": 2000,
              "minimum": 1,
              "maximum": 10000
            },
            "events": {
              "type": "array",
              "example": [
                "MCSS Game Night",
                "UTM Exam Jam"
              ],
              "items": {
                "$ref": "#/definitions/Event"
              }
            }
          }
        }
      ]
    },
    "Event": {
      "type": "object",
      "required": [
        "description",
        "id",
        "name",
        "organizer",
        "place",
        "startTime",
        "tags"
      ],
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "d290f1ee-6c54-4b01-90e6-d701748f0851"
        },
        "name": {
          "type": "string",
          "example": "Game Night"
        },
        "organizer": {
          "type": "string",
          "format": "clubName",
          "example": "MCSS"
        },
        "startTime": {
          "type": "string",
          "format": "date-time",
          "example": "2021-09-20T17:00:00Z"
        },
        "endTime": {
          "type": "string",
          "format": "date-time",
          "example": "2021-09-20T21:00:00Z"
        },
        "place": {
          "$ref": "#/definitions/SubLocation"
        },
        "description": {
          "type": "string",
          "format": "bio",
          "example": "Come join us for Cards Against Humanity and Super Smash Bros."
        },
        "tags": {
          "type": "array",
          "example": [
            "Board Games",
            "Computer Science",
            "Video Games"
          ],
          "items": {
            "$ref": "#/definitions/Tag"
          }
        }
      }
    },
    "Tag": {
      "type": "object",
      "required": [
        "description",
        "id",
        "name"
      ],
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "d290f1ee-6c54-4b01-90e6-d701748f0851"
        },
        "name": {
          "type": "string",
          "example": "Board Games"
        },
        "description": {
          "type": "string",
          "format": "bio",
          "example": "This event has board games."
        }
      }
    },
    "Location_subLocations": {
      "type": "object",
      "properties": {
        "code": {
          "$ref": "#/definitions/SubLocation"
        },
        "text": {
          "type": "string"
        }
      }
    }
  }
}