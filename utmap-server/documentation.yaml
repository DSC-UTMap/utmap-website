swagger: '2.0'
info:
  description: This is a simple API that shows how UTMap will perform its operations
  version: 1.0.0
  title: UTMap API
  # put the contact info for your development or API team
  contact:
    email: you@your-company.com

  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html

# tags are used for organizing operations
tags:
- name: buildings
  description: Operations related to the buildings displayed by UTMap
- name: events
  description: Operations related to events at UTMap

paths:
  /building:
    get:
      tags:
      - buildings
      summary: Retrieves all buildings on UTMap
      operationId: getAllBuildings
      description: A user can retrieve a full list of existing buildings in the system
      produces:
      - application/json
      responses:
        200:
          description: results found
          schema:
            type: array
            items:
              $ref: '#/definitions/Building'
        400:
          description: bad input parameter
    post:
      tags:
      - buildings
      summary: Adds a building to UTMap
      operationId: addBuilding
      description: A user can submit a json representation of a building to add to the list of existing buildings in the system
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Building object to add to the map
        required: true
        schema:
          $ref: '#/definitions/Building'
      responses:
        201:
          description: item created
        400:
          description: invalid input, object invalid
        409:
          description: an existing item already exists
  /building/{_id}:
    put:
      tags:
      - buildings
      summary: updates an existing building on UTMap
      operationId: updateBuilding
      description: By passing in a valid ID, a user can submit a json representation of a building to replace an existing building in the system
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: path
        name: _id
        description: ID unique to the building that needs to be updated.
        required: true
        type: string
        format: uuid
      - in: body
        name: body
        description: Building object to update
        required: true
        schema:
          $ref: '#/definitions/Building'
      responses:
        201:
          description: item updated
        400:
          description: invalid input, object invalid
        404:
          description: object not found
    get:
      tags:
      - buildings
      summary:  Finds one building from UTMap
      operationId: getOneBuilding
      description: By passing in a valid ID building code, a user can search for a specific building in the system
      produces:
      - application/json
      parameters:
      - in: path
        name: _id
        description: ID unique to the building that needs to be deleted.
        required: true
        type: string
        format: uuid
      responses:
        200:
          description: building found
          schema:
            $ref: '#/definitions/Building'
        400:
          description: Invalid id supplied
        404:
          description: building not found
    delete:
      tags:
      - buildings
      summary:  Deletes a building with the specified unique ID
      operationId: deleteOneBuilding
      description: By passing in a valid ID, a user can delete a specific building in the system
      produces:
      - application/json
      parameters:
      - in: path
        name: _id
        description: ID unique to the building that needs to be deleted.
        required: true
        type: string
        format: uuid
      responses:
        200:
          description: building deleted
          schema:
            $ref: '#/definitions/Building'
        400:
          description: Invalid id supplied
        404:
          description: location not found
  /event:
    get:
      tags:
      - events
      summary: Retrieves all events on UTMap
      operationId: getAllEvents
      description: A user can retrieve a full list of existing events in the system
      produces:
      - application/json
      responses:
        200:
          description: results found
          schema:
            type: array
            items:
              $ref: '#/definitions/Event'
        400:
          description: bad input parameter
    post:
      tags:
      - events
      summary: Adds an event to UTMap
      operationId: addEvent
      description: A user can submit a json representation of an event to add to the list of existing events in the system
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: event
        description: Event to add
        schema:
          $ref: '#/definitions/Event'
      responses:
        201:
          description: item created
        400:
          description: invalid input, object invalid
        409:
          description: an existing item already exists
  /event/{_id}:
    put:
      tags:
      - events
      summary: updates an existing event on UTMap
      description: By passing in a valid ID, a user can submit a json representation of an event to replace an existing event in the system
      operationId: updateEvent
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: path
        name: _id
        description: ID unique to the event that needs to be updated.
        required: true
        type: string
        format: uuid
      - in: body
        name: body
        description: Event object to update
        required: true
        schema:
          $ref: '#/definitions/Event'
      responses:
        201:
          description: item updated
        400:
          description: invalid input, object invalid
        404:
          description: object not found
    get:
      tags:
      - events
      summary:  Finds an event by its unique ID
      operationId: getEventByName
      description: By passing in a valid ID, a user can search for a specific event in the system
      produces:
      - application/json
      parameters:
      - in: path
        name: _id
        description: ID unique to the event that needs to be deleted.
        required: true
        type: string
        format: uuid
      responses:
        200:
          description: event found
          schema:
            $ref: '#/definitions/Event'
        400:
          description: Invalid id supplied
        404:
          description: event not found
    delete:
      tags:
      - events
      summary:  Deletes an event with the specified unique ID
      operationId: deleteEvent
      description: By passing in a valid ID, a user can delete a specific event in the system
      produces:
      - application/json
      parameters:
      - in: path
        name: _id
        description: ID unique to the event that needs to be deleted.
        required: true
        type: string
        format: uuid
      responses:
        200:
          description: event deleted
          schema:
            $ref: '#/definitions/Event'
        400:
          description: Invalid id supplied
        404:
          description: event not found
definitions:
  Building:
    type: object
    required:
    - _id
    - name
    - code
    properties:
      _id:
        type: string
        format: uuid
        example: d290f1ee-6c54-4b01-90e6-d701748f0851
      name:
        type: string
        example: Deerfield Hall
      code:
        type: string
        format: buildingCode
        minLength: 2
        maxLength: 2
        example: DH
  Event:
    type: object
    required:
    - _id
    - name
    - organizer
    - startTime
    - EndTime
    - room
    - description
    properties:
      _id:
        type: string
        format: uuid
        example: d290f1ee-6c54-4b01-90e6-d701748f0851
      name:
        type: string
        example: Game Night
      organizer:
        type: string
        format: clubName
        example: MCSS
      startTime:
        type: string
        format: date-time
        example: '2021-09-20T17:00:00Z'
      endTime:
        type: string
        format: date-time
        example: '2021-09-20T21:00:00Z'
      building:
        $ref: '#/definitions/Building'
      room:
        type: string
        format: roomCode
        example: DH2000
      description:
        type: string
        format: bio
        example: Come join us for Cards Against Humanity and Super Smash Bros.
# Added by API Auto Mocking Plugin
host: virtserver.swaggerhub.com
basePath: /RobS9919/UTMap-API/1.0.0
schemes:
 - https
 - http